stages:
  # - clean
  - deploy

# Stops or removes previous containers that allows deploy to run.
# Some commands can fail if the container does not exist
# clean:
#   stage: clean
#   image: docker:latest
#   allow_failure: true
#   script:
#     - docker stop personal-website
#     - docker image prune -f
#     - docker container prune -f

# Builds a docker image that is connected to the docker socket where the runner is located.
# Runs the container with:
#   --rm : cleans up after container stops
#   -d : detached
#   -p : ports
#   --name : name of the container
#   $CI_REGISTRY_IMAGE: environment variable set by GitLab Runner
#   5000 on host, 3000 inside the container

before_script:
  - echo test
  - echo $BACKEND_PORT
  - export DB_CONNECTION_STRING=$DB_CONNECTION_STRING
  - export DB_CONNECTION_STRING=$DB_CONNECTION_STRING
  - export SECRET_JWT=$SECRET_JWT
  - export SECRET_REFRESH_TOKEN=$SECRET_REFRESH_TOKEN
  - export SECRET_COOKIE=$SECRET_COOKIE
  - export BACKEND_PORT=$BACKEND_PORT
  - export FRONTEND_PORT=$FRONTEND_PORT

deploy:
  stage: deploy
  image: docker:latest
  script:
    - docker-compose up -d
    # - docker build --pull -t $CI_REGISTRY_IMAGE .
    # - docker run -d --restart unless-stopped -p 5000:3000 --name personal-website $CI_REGISTRY_IMAGE:latest
